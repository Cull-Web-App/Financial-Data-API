# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: financial-data-api
frameworkVersion: ">=1.16.0 <2.0.0"

plugins:
  - serverless-offline
  - serverless-plugin-typescript

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-2
  websocketApiRouteSelectionExpression: $request.body.action
  environment:
    SLS_DEBUG: true
    NODE_ENV: ${self:custom.myStage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - !GetAtt FinancialDataQuotes.Arn
        - !GetAtt FinancialDataSubscriptions.Arn

package:
  exclude:
    - node_modules/**/*
  include:
    - src/!{*.spec}.ts
    - src/**/*.json

functions:
  getStockQuotesAtInterval:
    handler: src/handler.getStockQuotesAtInterval
    events:
      - http:
          path: /getStockQuotesAtInterval
          method: get
          cors: true
  updateQuotesForAllAssetsAndPublish:
    handler: src/handler.updateQuotesForAllAssetsAndPublishMessages
    events:
      - http:
          path: /updateQuotesForAllAssetsAndPublishMessages
          method: get
          cors: true
  quoteSubscriptionConnectionHandler:
    handler: src/handler.quoteSubscriptionConnectionHandler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default
  updateQuotesForAllAssets:
    handler: src/handler.updateQuotesForAllAssets
    events:
      - http:
          path: /updateQuotesForAllAssets
          method: post
          cors: true
  updateQuoteForAsset:
    handler: src/handler.updateQuoteForAsset
    events:
      - http:
          path: /updateQuoteForAsset
          method: post
          cors: true

# Define CFN resources here
resources:
  Resources:
    # Table for the quote info
    FinancialDataQuotes:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: FinancialDataQuotes-${self:custom.myStage}
        AttributeDefinitions:
          - AttributeName: symbol
            AttributeType: S
          - AttributeName: dateTime
            AttributeType: S
        KeySchema:
          - AttributeName: symbol
            KeyType: HASH
          - AttributeName: dateTime
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    # Table for the WS subscription info
    FinancialDataSubscriptions:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: FinancialDataSubscriptions-${self:custom.myStage}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        # Do we want provisioned throughput? Might want to update this to scale
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

  Outputs:
    FinancialDataQuotesArn:
      Description: The ARN for the FinancialDataQuotes DynamoDB Table
      Value:
        !GetAtt FinancialDataQuotes.Arn
      Export:
        Name: FinancialDataQuotesArn-${self:custom.myStage}
    FinancialDataSubscriptionsArn:
      Description: The ARN for the FinancialDataSubscriptions DynamoDB Table
      Value:
        !GetAtt FinancialDataSubscriptions.Arn
      Export:
        Name: FinancialDataSubscriptionsArn-${self:custom.myStage}

custom:
  serverless-offline:
    port: 8000
  myStage: ${opt:stage, self:provider.stage}
